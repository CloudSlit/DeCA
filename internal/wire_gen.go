// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"context"
	"github.com/cloudslit/newca/internal/api"
	"github.com/cloudslit/newca/internal/dao/certificate"
	"github.com/cloudslit/newca/internal/initx"
	"github.com/cloudslit/newca/internal/router"
	"github.com/cloudslit/newca/internal/service"
)

// Injectors from wire.go:

func BuildInjector(ctx context.Context) (*Injector, func(), error) {
	execCloser, cleanup, err := initx.InitStorage()
	if err != nil {
		return nil, nil, err
	}
	crdtKeyValueDB, cleanup2, err := initx.InitCrdtKv(ctx)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	certificateRepo := &certificate.CertificateRepo{
		DB:   execCloser,
		Crdt: crdtKeyValueDB,
	}
	signer, err := initx.InitSigner()
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	handler, err := initx.InitInfoHandle(signer)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	tlsSrv := &service.TlsSrv{
		CertificateRepo: certificateRepo,
		Signer:          signer,
		InfoHandle:      handler,
	}
	tlsAPI := &api.TlsAPI{
		TlsSrv: tlsSrv,
	}
	certificateSrv := &service.CertificateSrv{
		CertificateRepo: certificateRepo,
	}
	certificateAPI := &api.CertificateAPI{
		CertificateSrv: certificateSrv,
	}
	routerRouter := &router.Router{
		TlsAPI:         tlsAPI,
		CertificateAPI: certificateAPI,
	}
	engine := InitGinEngine(routerRouter)
	injector := &Injector{
		Engine: engine,
	}
	return injector, func() {
		cleanup2()
		cleanup()
	}, nil
}
